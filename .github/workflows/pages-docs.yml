name: Build LaTeX to docs/ (robusto)

on:
  push:
    branches: [ "main" ]   # troque se sua branch principal for outra
    paths:
      - "**/*.tex"
      - "**/*.bib"
      - "**/*.sty"
      - "**/*.cls"
      - "**/*.bbx"
      - "**/*.cbx"
      - "**/*.lbx"
      - "**/*.ist"
      - "**/*.glo"
      - "**/*.acn"
      - "**/*.acr"
      - ".github/workflows/pages-docs.yml"
  workflow_dispatch:

permissions:
  contents: write

env:
  MAIN_TEX: "main.tex"          # ajuste se o seu arquivo principal tiver outro nome ou estiver em subpasta, ex: "tex/dissertacao.tex"
  OUT_PDF_NAME: "main.pdf"      # nome do PDF publicado em docs/

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show tree (debug)
        run: |
          echo "MAIN_TEX=${MAIN_TEX}"
          echo "Repository tree (depth 2):"
          find . -maxdepth 2 -type f -print

      - name: Ensure MAIN_TEX exists
        run: |
          if [ ! -f "${MAIN_TEX}" ]; then
            echo "::error ::Arquivo principal não encontrado: ${MAIN_TEX}"
            exit 1
          fi

      - name: Install TeX Live (full)
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-full latexmk biber python3-pygments xindy

      - name: Build (pdflatex + biber/bibtex + glossaries + re-runs)
        run: |
          set -e
          TEX="${MAIN_TEX}"
          TEXDIR="$(dirname "$TEX")"
          TEXBASE="$(basename "$TEX")"
          JOBNAME="$(basename "$TEXBASE" .tex)"

          # entrar na pasta se houver subpasta
          if [ "$TEXDIR" != "." ]; then cd "$TEXDIR"; fi

          echo "== 1) pdflatex inicial =="
          pdflatex -interaction=nonstopmode -file-line-error "$TEXBASE" || true

          echo "== 2) bibliografia (biber ou bibtex) =="
          if [ -f "$JOBNAME.bcf" ]; then
            biber "$JOBNAME" || true
          else
            if [ -f "$JOBNAME.aux" ] && grep -q '\\bibdata' "$JOBNAME.aux"; then
              bibtex "$JOBNAME" || true
            fi
          fi

          echo "== 3) glossários/índice (se existirem) =="
          if ls "$JOBNAME".glo "$JOBNAME".acn "$JOBNAME".acr "$JOBNAME".ist >/dev/null 2>&1; then
            makeglossaries "$JOBNAME" || true
          fi
          if [ -f "$JOBNAME.idx" ]; then
            makeindex "$JOBNAME" || true
          fi

          echo "== 4) pdflatex (2x) para estabilizar referências =="
          pdflatex -interaction=nonstopmode -file-line-error "$TEXBASE" || true
          pdflatex -interaction=nonstopmode -file-line-error "$TEXBASE" || true

          if [ ! -f "$JOBNAME.pdf" ]; then
            echo "::error ::PDF não foi gerado. Verifique os logs acima."
            exit 1
          fi

          # voltar para a raiz e publicar
          cd - > /dev/null
          mkdir -p docs
          cp -f "$TEXDIR/$JOBNAME.pdf" "docs/${OUT_PDF_NAME}"

          # criar/atualizar index.html sem heredoc / sem { } >
          if [ ! -f docs/index.html ]; then
            echo '<!DOCTYPE html>' > docs/index.html
            echo '<html lang="pt-BR">' >> docs/index.html
            echo '<head><meta charset="utf-8"><title>Documentos</title></head>' >> docs/index.html
            echo '<body>' >> docs/index.html
            echo '  <h1>PDFs gerados</h1>' >> docs/index.html
            echo "  <p><a href=\"./${OUT_PDF_NAME}\">Baixar ${OUT_PDF_NAME}</a></p>" >> docs/index.html
            echo '</body>' >> docs/index.html
            echo '</html>' >> docs/index.html
          else
            if ! grep -q "${OUT_PDF_NAME}" docs/index.html; then
              tmpfile="docs/index.tmp.html"
              awk -v link="<p><a href=\"./${OUT_PDF_NAME}\">Baixar ${OUT_PDF_NAME}</a></p>" '
                /<\/body>/ && !done { print link; done=1 }
                { print }
              ' docs/index.html > "$tmpfile"
              mv "$tmpfile" docs/index.html
            fi
          fi

          echo "Conteúdo de docs/:"
          ls -la docs

      - name: Commit PDF into docs/
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: update PDF in docs [skip ci]"
          file_pattern: docs/*
